#!/usr/bin/bash

RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
CLEAR='\033[0m'

CONFIG_FILE_PATH="$HOME/.config/nvim.conf"
VERSION=0.1.0
INSTALLER_PATH=$HOME/.local/bin/nvim-manager-install.sh

source $INSTALLER_PATH

show_help() {
  echo -e "Usage: ${YELLOW}Neovim Manager CLI ${PURPLE}[COMMAND]${CYAN} [NVIM_OPTIONS...]${CLEAR}"
  echo
  echo "Available commands: (no command or options start config selector)"
  echo -e "  ${PURPLE}sel, select${CLEAR}         Show a selector to choose the Neovim configuration"
  echo -e "  ${PURPLE}edit, edit-config${CLEAR}   Edit Neovim Managaer config"
  echo -e "  ${PURPLE}def, default${CLEAR}        Use default config"
  echo -e "  ${PURPLE}sys, system${CLEAR}         Use system config"
  echo -e "  ${PURPLE}set, setup${CLEAR}          Setup Neovim Manager"
  echo
  echo "Available options:"
  echo -e "  ${PURPLE}-h, --help${CLEAR}          Show help"
  echo -e "  ${PURPLE}-v, --version${CLEAR}       Show CLI version"
  # echo -e "  ${PURPLE}-d, --default${CLEAR}       Show default config path"
  # echo -e "  ${PURPLE}-c, --conf${CLEAR}          Show available configs"
}

get_nvim_instances() {
  # Check if the config file exists
  if [ ! -f "$CONFIG_FILE_PATH" ]; then
    echo -e "${YELLOW}The configuration file does not exist: $CONFIG_FILE_PATH${YELLOW}"
    exit 1
  fi

  # Read the config file
  local items=()
  while IFS= read -r line || [[ -n "$line" ]]; do
    items+=("$line")
  done <"$CONFIG_FILE_PATH"

  # Check if the config file is empty
  if [ ${#items[@]} -eq 0 ]; then
    echo -e "${YELLOW}No configurations found in $CONFIG_FILE_PATH${YELLOW}"
    exit 1
  fi

  printf "%s\n" "${items[@]}"
}

select_config() {
  items=$(get_nvim_instances)

  local config=$(printf "%s\n" "${items[@]}" | fzf --prompt="Please select a Neovim  from ~/.config/: " --height=~50% --layout=reverse --exit-0)

  if [[ -z $config ]]; then
    echo -e "${YELLOW}Oops! Nothing selected!${YELLOW}"
    exit 0
  fi

  # Remove the * character
  config="${config%\*}"

  echo "$HOME/.config/$config"

  if [[ ! -d "$HOME/.config/$config" ]]; then
    echo -e "${YELLOW}La configuración seleccionada no existe.${YELLOW}"
    exit 1
  fi

  NVIM_APPNAME=$config nvim "$@"
}

get_default_config() {
  items=($(get_nvim_instances))

  # Set the default instance
  local default_config
  for item in "${items[@]}"; do
    if [[ "$item" == *"*" ]]; then
      default_config="${item%}"
      break
    fi
  done

  default_config=${default_config:-${items[0]}}

  # Remove the * character
  default_config="${default_config%\*}"

  echo $default_config
}

use_default_environment() {
  default_config=$(get_default_config)

  NVIM_APPNAME=$default_config nvim "$@"

  exit 0
}

use_native_environment() {
  # Default behavior (no script commds)
  nvim "$@"
  exit 0
}

use_config_selector() {
  echo -e "${GREEN}Config Selector${GREEN}"
  select_config "$@"
  exit 0
}

show_nvim_manager_version() {
  echo -e "${GREEN}$VERSION${GREEN}"
  exit 0
}

show_default_config_path() {
  default_config=$(get_default_config)
  echo -e "${GREEN}$HOME/.config/$default_config${GREEN}"
}

show_available_configs() {
  items=$(get_nvim_instances)
  echo -e "${GREEN}${items[@]}${GREEN}"
}

[[ $# -eq 0 ]] && use_config_selector

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
  sel | select)
    echo "sel"
    shift # Remove argument
    use_config_selector "$@"
    ;;
  edit | edit-config)
    echo "sel"
    shift # Remove argument
    use_default_environment $CONFIG_FILE_PATH
    ;;
  def | default)
    shift # Remove argument
    use_default_environment "$@"
    echo "Default"
    ;;
  sys | system)
    shift # Remove argument
    use_native_environment "$@"
    ;;
  set | setup)
    shift # Remove argument
    setup

    ;;
  -d | --default)
    shift # Remove argument
    show_default_config_path
    exit 0
    ;;
  -h | --help)
    shift # Remove argument
    show_help
    ;;
  -v | --version)
    shift # Remove argument
    show_nvim_manager_version
    exit 0
    ;;
  -c | --conf)
    shift # Remove argument
    show_available_configs
    exit 0
    ;;
  *)
    use_config_selector "$@"
    break
    ;;
  esac
done
